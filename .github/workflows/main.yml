name: Deploy YMU_App to Raspberry Pi

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 🚀 Kodu Checkout Et
      uses: actions/checkout@v4

    - name: 🛠 .NET Build (Runner üzerinde ön derleme)
      run: |
        dotnet restore YMU_App.csproj # .csproj dosyanızın adını kontrol edin
        dotnet build YMU_App.csproj --configuration Release # .csproj dosyanızın adını kontrol edin

    - name: Install Tailscale (Opsiyonel)
      if: ${{ secrets.TAILSCALE_AUTHKEY != '' }}
      run: |
        curl -fsSL https://tailscale.com/install.sh | sh
        sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname github-runner-${{ github.run_id }}

    - name: 🔑 SSH Key Kurulumu ve Sunucuya Bağlantı Hazırlığı
      run: |
        echo "Creating .ssh directory"
        mkdir -p $HOME/.ssh
        echo "Setting permissions for .ssh"
        chmod 700 $HOME/.ssh
        echo "Adding private key"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_ed25519 # Kullandığınız anahtar tipine göre (örn: id_rsa) değiştirebilirsiniz
        chmod 600 $HOME/.ssh/id_ed25519
        echo "Running ssh-keyscan"
        ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> $HOME/.ssh/known_hosts || true
        echo "Listing .ssh directory"
        ls -la $HOME/.ssh

    - name: 💂🏻 Mevcut Konteyneri Durdur ve Sil
      run: |
        ssh -i $HOME/.ssh/id_ed25519 \
            -oKexAlgorithms=+diffie-hellman-group14-sha1 -oCiphers=aes128-ctr \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.SSH_PORT || '22' }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker stop ymuapp || true   # Konteyner adınızı buraya yazın
          docker rm ymuapp || true     # Konteyner adınızı buraya yazın
        EOF

    - name: 📂 Sunucuya Proje Dosyalarını Kopyala
      run: |
        scp -i $HOME/.ssh/id_ed25519 \
            -oKexAlgorithms=+diffie-hellman-group14-sha1 -oCiphers=aes128-ctr \
            -o StrictHostKeyChecking=no \
            -P ${{ secrets.SSH_PORT || '22' }} \
            -r ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/ymuapp # Hedef klasör adını buraya yazın

    - name: 🔄 Sunucuda Docker Image Oluştur
      run: |
        ssh -i $HOME/.ssh/id_ed25519 \
            -oKexAlgorithms=+diffie-hellman-group14-sha1 -oCiphers=aes128-ctr \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.SSH_PORT || '22' }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /home/${{ secrets.SSH_USER }}/ymuapp
          docker build -t ymuapp:latest .
        EOF

    - name: 🚀 Sunucuda Docker Konteynerini Çalıştır
      run: |
        ssh -i $HOME/.ssh/id_ed25519 \
            -oKexAlgorithms=+diffie-hellman-group14-sha1 -oCiphers=aes128-ctr \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.SSH_PORT || '22' }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          # Raspberry Pi'nin 1001 portunu konteynerin 8080 portuna yönlendiriyoruz.
          # Dockerfile'ınızdaki uygulamanız konteyner içinde 8080 portunu dinliyor olmalı.
          docker run -d -p 1001:8080 --restart always --name ymuapp ymuapp:latest
        EOF
